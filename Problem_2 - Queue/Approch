Problem 2 – Design Circular Queue  

Approach
This problem is solved using a circular array approach:

1. Enqueue Operation → add an element at the `rear` pointer, and wrap around using modulo if needed.  
2. Dequeue Operation → remove an element from the `front` pointer, and wrap around using modulo if needed.  
3. Maintain `front` and `rear` pointers to check for empty and full conditions.  

Each operation (`enqueue`, `dequeue`, `Front`, `Rear`) is performed in O(1) time.  
We only use a fixed-size array and a few pointers, giving O(1) space complexity.

In short:  
> Use a fixed-size array with `front` and `rear` pointers, wrap around using modulo, and perform all queue operations in constant time.

Complexity
- Time Complexity: O(1) per operation (`enqueue`, `dequeue`, `Front`, `Rear`)  
- Space Complexity: O(k), where k is the size of the queue


